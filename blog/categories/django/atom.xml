<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | 三人寄れば文殊の知恵]]></title>
  <link href="http://cb21dev.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://cb21dev.github.io/"/>
  <updated>2013-08-26T00:17:29+09:00</updated>
  <id>http://cb21dev.github.io/</id>
  <author>
    <name><![CDATA[cb21 development team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django チュートリアル[プロジェクト作成-モデル作成]]]></title>
    <link href="http://cb21dev.github.io/blog/2013/08/26/django-tutorial-02/"/>
    <updated>2013-08-26T00:00:00+09:00</updated>
    <id>http://cb21dev.github.io/blog/2013/08/26/django-tutorial-02</id>
    <content type="html"><![CDATA[<p>こんにちは。Catchball21　技術部の森本です。</p>

<p>蒸し暑い日が続いていますが，体調等は崩されていないでしょうか？<br/>
僕は少し夏バテ気味なので，早く涼しくなって欲しいと祈るばかりです．</p>

<p>今回は前回に続いて、DjangoによるWebアプリ開発についてご紹介します.<br/>
プロジェクト・アプリ・モデルの各作成について詳しく解説していきます.</p>

<h2>作成するWebアプリ</h2>

<p>今回のチュートリアルでは、シンプルな掲示板を題材にしています.<br/>
完成イメージは下記のようなイメージになります．</p>

<p><img src="/images/20130826/20130826_1.png" title="&lsquo;SimpleBoard image&rsquo; &lsquo;this is a SimpleBoard image&rsquo;" ></p>

<p>フォームから入力し，入力した内容を下部に表示する単純なCRUDを行うWebアプリですね．</p>

<h2>プロジェクト作成</h2>

<p>まずはプロジェクトを作成しましょう．
Djangoをインストールすると<code>django-admin.py</code>コマンドが併せてインストールされます．
プロジェクト作成は<code>django-admin.py</code>を使用して，作成します．</p>

<pre><code>(django_tutorial)% django-admin.py startproject myproject
</code></pre>

<p>上記コマンドを実行すると<code>myproject</code>という名前のディレクトリが作成されます．
以後はこの<code>myproject</code>内で作業をしていくのですが，その前にプロジェクトについてDjangoの便利な機能をご紹介します．</p>

<p>Djangoでは1.4から<code>project template</code>という機能が追加されました．<br/>
<code>project template</code>ではフォルダ構成や追加した3rd Party のライブラリ等をテンプレート化し，纏めておくことができます．またそれらのテンプレートを使用してプロジェクトを作成することができます．<br/>
つまりプロジェクトを通じて得たノウハウをテンプレート化し，次回のプロジェクトでも簡単に使用することができる機能と言えます．<br/>
テンプレートはgithub等で公開されているものがあるので，それらを使用することで初心者でもDjangoのベストプラクティスを利用することができます．</p>

<p><code>project template</code>については，hirokikyさんが素晴らしい<a href="http://d.hatena.ne.jp/hirokiky/20120702/1341231182">紹介記事</a>を書いてらっしゃるので、皆さんご覧になってみてください。</p>

<p>今回は<code>django-skel</code>というテンプレートを使用したいと思います．<br/>
先程作成した<code>myproject</code>ディレクトリを削除して，下記コマンドを実行し，新たに<code>django-skel</code>テンプレートを利用するプロジェクトを作成しましょう．</p>

<pre><code>(django_tutorial)% django-admin.py startproject --template=https://github.com/rdegges/django-skel/zipball/master myproject
</code></pre>

<p><code>myproject</code>ディレクトリが作成されていれば，成功です．</p>

<p><code>myproject</code>ディレクトリに移動し，必要なライブラリをインストールします．<code>django-skell</code>では，<code>reqs</code>ディレクトリ以下に開発環境(<code>dev.txt</code>)と本番環境(<code>prod.txt</code>)で使用するライブラリを分けて記載しています．まずは開発用のライブラリをインストールするだけで良いでしょう．</p>

<pre><code>(django_tutorial)% pip install -r reqs/dev.txt
</code></pre>

<h2>アプリ作成</h2>

<p>プロジェクトが作成できたら，アプリを作成します．
django-skelではアプリの配置場所として<code>myproject/apps</code>が用意されている為，<code>myproject/apps</code>配下に作成します．</p>

<pre><code>(django_tutorial)% cd myproject/apps
(django_tutorial)% python ../../manage.py startapp simpleboard
</code></pre>

<p><code>myproject/apps</code>配下に<code>simpleboard</code>という名前のディレクトリが作成されていることを確認して下さい．
また<code>simpleboard</code>配下にはviewとmodelの雛形が作成されます．</p>

<pre><code>(django_tutorial)% ls simpleboard
__init__.py models.py   tests.py    views.py
</code></pre>

<p>アプリを作成したら，Djangoに新規作成したアプリを登録する必要があります．<br/>
<code>myproject/settings/common.py</code>を編集して先程作成した<code>simpleboard</code>を登録しましょう．<br/>
<code>LOCAL_APPS</code>に下記のように<code>simpleboard</code>を追記します．</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>common.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">LOCAL_APPS</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&#39;apps.simpleboard&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>モデル作成</h2>

<p>アプリの作成まで完了したら，いよいよモデルを作っていきましょう．<br/>
まずは今回必要となるモデルについて考えましょう．<br/>
今回作成するのはシンプルな一行掲示板の為，最低限入力した内容を保存するカラムだけがあれば問題なさそうです．
SQLで表すとは下記のような感じになるでしょうか．</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>models.sql </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">simpleboard_board</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">(</span>
</span><span class='line'>   <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nb">integer</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>   <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">entry</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ではモデルを作成しましょう．<br/>
Djangoでは<code>models.py</code>がモデルに対応する為，<code>models.py</code>を編集します．</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>models.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Board</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">entry</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharFiled</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上記では<code>entry</code>というフィールドを持った<code>Board</code>モデルを定義しています．
クラスがDBのテーブル，クラスのアトリビュートがDBのカラムに対応しています．</p>

<p>モデルが定義できたら，DBに反映する必要があります．
プロジェクトのトップディレクトリに戻り下記コマンドを実行して下さい．</p>

<pre><code>(django_tutorial)% python manage.py syncdb
Syncing...
Creating tables ...
Creating table auth_permission
Creating table auth_group_permissions
Creating table auth_group
Creating table auth_user_groups
Creating table auth_user_user_permissions
Creating table auth_user
Creating table django_content_type
Creating table django_session
Creating table django_site
Creating table django_admin_log
Creating table south_migrationhistory
Creating table simpleboard_board

You just installed Django's auth system, which means you don't have any superusers defined.
Would you like to create one now? (yes/no): yes
Username (leave blank to use '****): admin
Email address: admin@*****
Password:
Password (again):
Superuser created successfully.
Installing custom SQL ...
Installing indexes ...
Installed 0 object(s) from 0 fixture(s)

Synced:
 &gt; django.contrib.auth
 &gt; django.contrib.contenttypes
 &gt; django.contrib.sessions
 &gt; django.contrib.sites
 &gt; django.contrib.messages
 &gt; django.contrib.staticfiles
 &gt; django.contrib.humanize
 &gt; django.contrib.admin
 &gt; django.contrib.admindocs
 &gt; south
 &gt; compressor
 &gt; apps.simpleboard
 &gt; debug_toolbar

Not synced (use migrations):
 - djcelery
(use ./manage.py migrate to migrate these)
</code></pre>

<p>初めて<code>syncdb</code>を実行した際は，管理者ユーザを作成するかを聞かれます．<br/>
<code>yes</code>と入力すると，管理者ユーザに必要な情報（ユーザ名，メールアドレス，パスワード）を聞かれるので，適当なものを入力して下さい．
作成した管理者ユーザは<code>admin site</code>へログインする際に使用します．</p>

<p>以上でモデルの作成は完了です．</p>

<p>次回はviewの作成についてご紹介する予定です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django チュートリアル[準備編]]]></title>
    <link href="http://cb21dev.github.io/blog/2013/08/19/django-tutorial-01/"/>
    <updated>2013-08-19T00:00:00+09:00</updated>
    <id>http://cb21dev.github.io/blog/2013/08/19/django-tutorial-01</id>
    <content type="html"><![CDATA[<p>こんにちは。Catchball21　技術部の森本です。</p>

<p>これから何回かに分けて、DjangoによるWebアプリ開発についてご紹介しようと思います。<br/>
今回は準備編になります。</p>

<h2>Djangoって？</h2>

<p>と、その前にDjangoをご存知無い方の為に簡単にご紹介します。</p>

<p>DjangoはPythonで書かれたオープンソースのWebアプリケーションフレームワークで、元々はニュース系のサイトを管理する目的で開発されたそうです。
いわゆるオールインワン型のフレームワークで特徴として、MVCパターンによく似た、MTVパターン（Model &ndash; Template &ndash; View）に従って開発することや標準でリッチな管理インターフェイスを持つこと等が挙げられます。</p>

<p><a href="https://www.djangoproject.com/"><img src="/images/20130808/django_web_site.png" title="&lsquo;Django Web Site&rsquo; &lsquo;this is a django web site image&rsquo;" ></a></p>

<p>当社でも受託開発や自社サービス開発にDjangoを利用しています。</p>

<h2>開発環境</h2>

<p>今回のチュートリアルでは下記の環境を想定しています。</p>

<ul>
<li>Mac OS X 10.7</li>
<li>Python 2.7</li>
<li>Django 1.5</li>
</ul>


<h2>準備</h2>

<p>では、早速準備に移って行きましょう。<br/>
まずはPythonの仮想環境を構築することができるvirtualenvを導入しましょう．</p>

<p>virtualenvはPythonのパッケージ管理ツールであるpipからインストールすることができます．</p>

<pre><code>% pip install virtualenv
</code></pre>

<p>virtualenvのラッパーで仮想環境の管理をしやすくするvirtualenvwrapperも導入しましょう．
こちらもpipでインストールことができます．</p>

<pre><code>% pip install virtualenvwrapper
</code></pre>

<p>virtualenv, virtualenvwrapperを使うためにはshellに追加の設定が必要です．<br/>
zshを使用している場合は<code>.zshrc</code>に以下の行を追加します．(bashの場合も同じように<code>.bashrc</code>に記述すれば大丈夫だと思います.)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.zhsrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> -f &lt;code&gt;which virtualenvwrapper.sh&lt;/code&gt; <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/local/bin/python
</span><span class='line'><span class="nb">source</span> <span class="sb">`</span>which virtualenvwrapper.sh<span class="sb">`</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>virtualenvwrapperの導入まで完了したら，仮想環境を作成しましょう．<br/>
今回は仮想環境名としてdjango_tutorialを使用します.</p>

<pre><code>% mkvirtualenv django_tutorial
New python executable in django_tutorial/bin/python
Installing setuptools............done.
Installing pip...............done.
</code></pre>

<p>shellのプロンプトの先頭に下記のように仮想環境名が表示されていれば，成功です．</p>

<pre><code>(django_tutorial)%
</code></pre>

<p>virtualenvwrapperについて簡単に使い方を紹介しておきます．</p>

<pre><code>(django_tutorial)% deactivate #deactivateで仮想環境から抜けることができます．
% workon #workonで作成した仮想環境の一覧を見ることができます．
django_tutorial
% workon django_tutorial # workon &lt;仮想環境名&gt; で仮想環境に入ることができます．
(django_tutorial)% mkvirtualenv hogehoge # mkvirtualenv &lt;仮想環境名&gt; で仮想環境を作成することができます．
New python executable in hogehoge/bin/python
Installing setuptools............done.
Installing pip...............done.
(hogehoge)% deactivate
(hogehoge)% rmvirtualenv hogehoge # rmvirtualenv &lt;仮想環境名&gt;で指定した仮想環境を削除することができます．
Removing hogehoge...
</code></pre>

<p>仮想環境の作成まで完了したら，Djangoをインストールします．
こちらもpipからインストールすることができます．</p>

<pre><code>(django_tutorial)% pip install django
</code></pre>

<p>以上で準備は完了です！</p>

<p>次回はDjangoのプロジェクト作成からモデルの作成までをご紹介する予定です．</p>
]]></content>
  </entry>
  
</feed>
